module ledDetector(
	// Inputs
	clk,
	reset,

	stream_in_data,
	stream_in_startofpacket,
	stream_in_endofpacket,
	stream_in_empty,
	stream_in_valid,
	stream_out_ready,

	// Outputs
	stream_in_ready,
	stream_out_data,
	stream_out_startofpacket,
	stream_out_endofpacket,
	stream_out_empty,
	stream_out_valid,

	// Conduits
	position_irq,
	m_position,
	n_position
);

/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/

	parameter IDW = 15; // Incoming frame's data width
	parameter ODW = 15; // Outcoming frame's data width

	parameter IEW =  0; // Incoming frame's empty width
	parameter OEW =  0; // Outcoming frame's empty width

/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/

	// Inputs
	input				  		  clk;
	input				  		  reset;

	input			  [IDW:0]	stream_in_data;
	input			  			  stream_in_startofpacket;
	input			  			  stream_in_endofpacket;
	//input			  [IEW:0]	stream_in_empty;
	input               stream_in_valid;
	input						    stream_out_ready;

	// Bidirectional

	// Outputs
	output					    stream_in_ready;
	output reg	[ODW:0]	stream_out_data;
	output reg				  stream_out_startofpacket;
	output reg				  stream_out_endofpacket;
	//output reg	[OEW:0]	stream_out_empty;
	output reg				  stream_out_valid;

	output reg    [9:0] m_position;
	output reg    [9:0] n_position;
	output reg          position_irq;
	

/*****************************************************************************
 *                           Constant Declarations                           *
 *****************************************************************************/

	parameter frame_size_row = 640;
	parameter frame_size_col = 240;
	parameter threshold_value = 250;
	parameter consecutive_threshold = 5;
	

/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/

	wire [7:0] y_component;

	//reg [9:0] m_counter;
	//reg [9:0] n_counter;
	//reg [9:0] consecutive_pixels;
	//reg [9:0] max_consecutive;
	//reg [9:0] m_stored;
	//reg [9:0] n_stored;

/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/

// Output Registers
always @(posedge clk)
begin
	if (reset)
	begin
		stream_out_data			    	<=  'h0;
		stream_out_startofpacket	<= 1'b0;
		stream_out_endofpacket		<= 1'b0;
		//stream_out_empty			  	<=  'h0;
		stream_out_valid				  <= 1'b0;
	end
	else if (transfer_data)
	begin
		stream_out_data				    <= stream_in_data;
		stream_out_startofpacket	<= stream_in_startofpacket;
		stream_out_endofpacket		<= stream_in_endofpacket;
		//stream_out_empty				  <= stream_in_empty;
		stream_out_valid				  <= stream_in_valid;
	end
end




/*****************************************************************************
 *                            Combinational Logic                            *
 *****************************************************************************/

	// Output Assignments
	//assign stream_in_ready 			= stream_in_valid & (~valid | transfer_data);

	// Internal Assignments
	assign transfer_data				= 
			~stream_out_valid | (stream_out_ready & stream_out_valid);

	assign y_component[7:0]          = stream_in_data[7:0];

endmodule
